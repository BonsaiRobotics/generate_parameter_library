**COMMENTS**

#pragma once

#include <rclcpp/node.hpp>
#include <rclcpp_lifecycle/lifecycle_node.hpp>
#include <vector>
#include <string>
**INCLUDES**


namespace **NAMESPACE** {

      class Result {
      public:
        template<typename ... Args>
        Result(const std::string &format, Args ... args) {
          int size_s = std::snprintf(nullptr, 0, format.c_str(), args ...) + 1; // Extra space for '\0'
          if (size_s <= 0) { throw std::runtime_error("Error during formatting."); }
          auto size = static_cast<size_t>( size_s );
          std::unique_ptr<char[]> buf(new char[size]);
          std::snprintf(buf.get(), size, format.c_str(), args ...);
          msg_ = std::string(buf.get(), buf.get() + size - 1); // We don't want the '\0' inside
          success_ = false;
        }

        Result() {
          success_ = true;
        }

        bool success() {
          return success_;
        }

        std::string error_msg() {
          return msg_;
        }

      private:
        std::string msg_;
        bool success_;
      };

      auto OK = Result();
      using ERROR = Result;

      Result validate_string_array_len(const rclcpp::Parameter &parameter, size_t size) {
        const auto &string_array = parameter.as_string_array();
        if (string_array.size() != size) {
          return ERROR(
              "The length of the parameter was incorrect. Expected size is %d, actual size is %d",
              size, string_array.size());
        }
        return OK;
      }

      Result validate_double_array_len(const rclcpp::Parameter &parameter, size_t size) {
        const auto &double_array = parameter.as_double_array();
        if (double_array.size() != size) {
          return ERROR(
              "The length of the parameter was incorrect. Expected size is %d, actual size is %d",
              size, double_array.size());
        }
        return OK;
      }

      Result validate_bool_array_len(const rclcpp::Parameter &parameter, size_t size) {
        const auto &bool_array = parameter.as_bool_array();
        if (bool_array.size() != size) {
          return ERROR(
              "The length of the parameter was incorrect. Expected size is %d, actual size is %d",
              size, bool_array.size());
        }
        return OK;
      }

      Result validate_double_array_bounds(const rclcpp::Parameter &parameter, double lower_bound, double upper_bound) {
        const auto &double_array = parameter.as_double_array();
        for (auto val: double_array) {
          if (val < lower_bound || val > upper_bound) {
            return ERROR(
                "The parameter value (%f) was outside the allowed bounds [(%f), (%f)]",
                val, lower_bound, upper_bound);
          }
        }
        return OK;
      }

    struct Params {
    **STRUCT_CONTENT**
      // for detecting if the parameter struct has been updated
      rclcpp::Time __stamp;
    };

    class ParamListener{
    public:
    // throws rclcpp::exceptions::InvalidParameterValueException on initialization if invalid parameter are loaded
    ParamListener(rclcpp::Node::SharedPtr node)
    : ParamListener(node->get_node_parameters_interface()) {}
    ParamListener(rclcpp_lifecycle::LifecycleNode::SharedPtr node)
    : ParamListener(node->get_node_parameters_interface()) {}
    ParamListener(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
        declare_params(parameters_interface);
        auto update_param_cb = [this](const std::vector<rclcpp::Parameter> &parameters){return this->update(parameters);};
        handle_ = parameters_interface->add_on_set_parameters_callback(update_param_cb);
        clock_ = rclcpp::Clock();
    }

    Params get_params() const{
        return params_;
    }

    bool is_invalid(Params const& other) const {
        return params_.__stamp != other.__stamp;
    }

        rcl_interfaces::msg::SetParametersResult update(const std::vector<rclcpp::Parameter> &parameters) {
          rcl_interfaces::msg::SetParametersResult result;
          result.successful = false;
          gen_param_struct_validators::Result validation_result;

          result.reason = "success";
          for (const auto &param: parameters) {
               **PARAM_SET**
          }
          if (result.successful){
            params_.__stamp = clock_.now();
          }
          return result;
        }

        void declare_params(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
            // declare all parameters and give default values to non-required ones

            **DESCRIBE_PARAMS**
            // get parameters and fill struct fields
            rclcpp::Parameter param;
            gen_param_struct_validators::Result validation_result;

            **GET_PARAMS**
            params_.__stamp = clock_.now();
        }

        private:
            std::mutex mutex_;
            Params params_;
            rclcpp::Clock clock_;
            std::shared_ptr<rclcpp::node_interfaces::OnSetParametersCallbackHandle> handle_;
    };

} // namespace **NAMESPACE**
