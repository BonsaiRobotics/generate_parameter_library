**COMMENTS**

**INCLUDES**


namespace **NAMESPACE** {

    struct **STRUCT_NAME** {
    // if true, prevent parameters from updating
    bool lock_params_ = false;
    std::shared_ptr<rclcpp::node_interfaces::OnSetParametersCallbackHandle> handle_;

    **STRUCT_NAME**(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
        declare_params(parameters_interface);
        auto update_param_cb = [this](const std::vector<rclcpp::Parameter> &parameters){return this->update(parameters);};
        handle_ = parameters_interface->add_on_set_parameters_callback(update_param_cb);
    }

    **STRUCT_CONTENT**

        rcl_interfaces::msg::SetParametersResult update(const std::vector<rclcpp::Parameter> &parameters) {
          rcl_interfaces::msg::SetParametersResult result;
          result.successful = !lock_params_;
          if (lock_params_){
            result.reason = "The parameters can not be updated because they are currently locked.";
            return result;
          }

          result.reason = "success";
          for (const auto &param: parameters) {
               **PARAM_SET**
          }
          return result;
        }

        void declare_params(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
            **DECLARE_PARAMS**
        }
    };

} // namespace **NAMESPACE**
