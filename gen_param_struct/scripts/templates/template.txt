**COMMENTS**

#pragma once

**INCLUDES**


namespace **NAMESPACE** {

    struct **STRUCT_NAME** {
    std::shared_ptr<rclcpp::node_interfaces::OnSetParametersCallbackHandle> handle_;

    // throws rclcpp::exceptions::InvalidParameterValueException on initialization if invalid parameter are loaded
    **STRUCT_NAME**(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
        declare_params(parameters_interface);
        auto update_param_cb = [this](const std::vector<rclcpp::Parameter> &parameters){return this->update(parameters);};
        handle_ = parameters_interface->add_on_set_parameters_callback(update_param_cb);
    }

    struct params {
    **STRUCT_CONTENT**
    } params_;

        rcl_interfaces::msg::SetParametersResult update(const std::vector<rclcpp::Parameter> &parameters) {
          rcl_interfaces::msg::SetParametersResult result;
          result.successful = false;
          gen_param_struct_validators::Result validation_result;

          result.reason = "success";
          for (const auto &param: parameters) {
               **PARAM_SET**
          }
          return result;
        }

        void declare_params(const std::shared_ptr<rclcpp::node_interfaces::NodeParametersInterface>& parameters_interface){
            // declare all parameters and give default values to non-required ones

            **DESCRIBE_PARAMS**
            // get parameters and fill struct fields
            rclcpp::Parameter param;
            gen_param_struct_validators::Result validation_result;

            **GET_PARAMS**
        }
    };

} // namespace **NAMESPACE**
